{"ast":null,"code":"var _jsxFileName = \"/Users/barski/Library/Mobile Documents/com~apple~CloudDocs/WORK/React Udemy/react1/https requests/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {});\n\n  const fetchMoviesHandler = async () => {\n    setIsloading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n\n      if (!response.ok) {\n        throw new Error('smth went wrong');\n      }\n\n      const data = await response.json();\n      const transformedData = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedData);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsloading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!isLoading ? /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 31\n      }, this) : \"Loading\", !isLoading && movies.length === 0 && !error && \"Not found any movies\", !isLoading && error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"8f+2CTk+4uwrwW4QhyZVBN53ln0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/barski/Library/Mobile Documents/com~apple~CloudDocs/WORK/React Udemy/react1/https requests/src/App.js"],"names":["React","useEffect","useState","MoviesList","App","movies","setMovies","isLoading","setIsloading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedData","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,CAAT;;AAIA,QAAMU,kBAAkB,GAAG,YAAY;AACnCH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,CAA5B;;AAEA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,YAAMC,eAAe,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBC,SAAS,IAAI;AAClD,eAAO;AACHC,UAAAA,EAAE,EAAED,SAAS,CAACE,UADX;AAEHC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAFd;AAGHC,UAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHpB;AAIHC,UAAAA,WAAW,EAAEN,SAAS,CAACO;AAJpB,SAAP;AAMH,OAPuB,CAAxB;AAQAtB,MAAAA,SAAS,CAACY,eAAD,CAAT;AACH,KAlBD,CAmBA,OAAOT,KAAP,EAAc;AACVC,MAAAA,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;AACH;;AACDrB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,GA3BD;;AA6BA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI;AAAA,6BACI;AAAQ,QAAA,OAAO,EAAEG,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAA,iBACK,CAACJ,SAAD,gBAAa,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEF;AAApB;AAAA;AAAA;AAAA;AAAA,cAAb,GAA8C,SADnD,EAEK,CAACE,SAAD,IAAcF,MAAM,CAACyB,MAAP,KAAkB,CAAhC,IAAqC,CAACrB,KAAtC,IAA+C,sBAFpD,EAGK,CAACF,SAAD,IAAcE,KAAd,iBAAuB;AAAA,kBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,cAH5B;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GAlDQL,G;;KAAAA,G;AAoDT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n    const [movies, setMovies] = useState([])\n    const [isLoading, setIsloading] = useState(false)\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n        \n    })\n\n    const fetchMoviesHandler = async () => {\n        setIsloading(true)\n        setError(null)\n        try {\n            const response = await fetch('https://swapi.dev/api/films/')\n\n            if (!response.ok) {\n                throw new Error('smth went wrong')\n            }\n\n            const data = await response.json()\n\n            const transformedData = data.results.map(movieData => {\n                return {\n                    id: movieData.episode_id,\n                    title: movieData.title,\n                    openingText: movieData.opening_crawl,\n                    releaseDate: movieData.release_date\n                }\n            })\n            setMovies(transformedData)\n        }\n        catch (error) {\n            setError(error.message)\n        }\n        setIsloading(false)\n\n    }\n\n    return (\n        <React.Fragment>\n            <section>\n                <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n            </section>\n            <section>\n                {!isLoading ? <MoviesList movies={movies} /> : \"Loading\"}\n                {!isLoading && movies.length === 0 && !error && \"Not found any movies\"}\n                {!isLoading && error && <p>{error}</p>}\n            </section>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}